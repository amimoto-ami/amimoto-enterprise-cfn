{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This is Powerful & Scalable AMIMOTO Stack made by CloudFormation.\nAdded RDS, Database change more scalable.\nUse service is VPC,EC2,EIP,CloudFront,S3,RDS(MariaDB).\n",
  "Mappings": {
    "MPAmimotov4": {
      "eu-west-1": {
        "AMI": "ami-002c9e73"
      },
      "ap-southeast-1": {
        "AMI": "ami-f0975e93"
      },
      "ap-southeast-2": {
        "AMI": "ami-5094b333"
      },
      "eu-central-1": {
        "AMI": "ami-bd1a00d1"
      },
      "ap-northeast-2": {
        "AMI": "ami-0b27e965"
      },
      "ap-northeast-1": {
        "AMI": "ami-be3031d0"
      },
      "us-east-1": {
        "AMI": "ami-ec437286"
      },
      "sa-east-1": {
        "AMI": "ami-c50380a9"
      },
      "us-west-1": {
        "AMI": "ami-bdafdedd"
      },
      "us-west-2": {
        "AMI": "ami-9232d1f2"
      }
    },
    "AZs": {
      "us-east-1": {
        "PRI": "us-east-1d",
        "SEC": "us-east-1c"
      },
      "us-west-2": {
        "PRI": "us-west-2b",
        "SEC": "us-west-2c"
      },
      "us-west-1": {
        "PRI": "us-west-1a",
        "SEC": "us-west-1b"
      },
      "eu-central-1": {
        "PRI": "eu-central-1a",
        "SEC": "eu-central-1b"
      },
      "eu-west-1": {
        "PRI": "eu-west-1c",
        "SEC": "eu-west-1b"
      },
      "ap-southeast-1": {
        "PRI": "ap-southeast-1b",
        "SEC": "ap-southeast-1a"
      },
      "ap-southeast-2": {
        "PRI": "ap-southeast-2b",
        "SEC": "ap-southeast-2a"
      },
      "ap-northeast-1": {
        "PRI": "ap-northeast-1c",
        "SEC": "ap-northeast-1a"
      },
      "ap-northeast-2": {
        "PRI": "ap-northeast-2c",
        "SEC": "ap-northeast-2a"
      },
      "sa-east-1": {
        "PRI": "sa-east-1b",
        "SEC": "sa-east-1a"
      }
    }
  },
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 key pair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "InstanceType": {
      "Description": "EC2 instance type",
      "Type": "String",
      "Default": "c3.large",
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "g2.2xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "MySQLPassword": {
      "Description": "Password of RDS User",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "64"
    },
    "MulitiAZDatabase": {
      "Description": "Crate a Multi-AZ RDS Database Instance",
      "Default": "false",
      "Type": "String",
      "AllowedValues": [
        "true",
        "false"
      ],
      "ConstraintDescription": "must be either true or false"
    },
    "RDSInstanceType": {
      "Description": "RDS Instance Type",
      "Default": "db.m3.medium",
      "Type": "String",
      "AllowedValues": [
        "db.t2.micro",
        "db.t2.small",
        "db.t2.medium",
        "db.m1.small",
        "db.m1.medium",
        "db.m1.large",
        "db.m1.xlarge",
        "db.m3.medium",
        "db.m3.large",
        "db.m3.xlarge",
        "db.m3.2xlarge",
        "db.m2.xlarge",
        "db.m2.2xlarge",
        "db.m2.4xlarge",
        "db.r3.large",
        "db.r3.xlarge",
        "db.r3.2xlarge",
        "db.r3.4xlarge",
        "db.r3.8xlarge"
      ],
      "ConstraintDescription": "Must be a valid RDS Instance Type."
    },
    "DBAllocatedStorage": {
      "Default": "20",
      "Description": "The size of the database (Gb)",
      "Type": "Number",
      "MinValue": "5",
      "MaxValue": "3072",
      "ConstraintDescription": "must be between 5 and 3072Gb."
    }
  },
  "Resources": {
    "PublicSubnet": {
      "Type": "AWS::EC2::Subnet",
      "DeletionPolicy": "Retain",
      "Properties": {
        "CidrBlock": "10.0.0.0/24",
        "AvailabilityZone": {
          "Fn::FindInMap": [
            "AZs",
            {
              "Ref": "AWS::Region"
            },
            "PRI"
          ]
        },
        "MapPublicIpOnLaunch": "true",
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "DeletionPolicy": "Retain",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "AssociationRtToPubSub": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DeletionPolicy": "Retain",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet"
        }
      }
    },
    "InternetGateway": {
      "DependsOn": "VPC",
      "DeletionPolicy": "Retain",
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "AttachGatewayToVPC": {
      "DependsOn": [
        "VPC",
        "InternetGateway"
      ],
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "DeletionPolicy": "Retain",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "Route": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "AttachGatewayToVPC",
      "DeletionPolicy": "Retain",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "DeletionPolicy": "Retain",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "InstanceTenancy": "default",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "EC2": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "/opt/aws/cf_option.json": {
                "content": "{\n                \"option\" : {\n                  \"cloudfront\" : \"true\",\n                  \"woo\": \"true\"\n                }\n              }",
                "mode": "00644",
                "owner": "root",
                "group": "root"
              },
              "/opt/aws/cloud_formation.json": {
                "content": "{\n\t  \"rds\" : {\n\t\t\"database\" : \"wordpress\",\n\t\t\"username\" : \"amimoto\",\n\t\t\"password\" : \"{{password}}\",\n\t\t\"endpoint\" : \"{{endpoint}}\",\n\t\t\"port\"     : 3306\n\t  }\n\t}",
                "context": {
                  "endpoint": {
                    "Fn::GetAtt": [
                      "RDS",
                      "Endpoint.Address"
                    ]
                  },
                  "password": {
                    "Ref": "MySQLPassword"
                  },
                  "serverid": "dummy(value_will_update_by_AmimotoFrontLC)"
                },
                "mode": "00644",
                "owner": "root",
                "group": "root"
              }
            }
          }
        }
      },
      "Properties": {
        "AvailabilityZone": {
          "Fn::FindInMap": [
            "AZs",
            {
              "Ref": "AWS::Region"
            },
            "PRI"
          ]
        },
        "DisableApiTermination": "false",
        "EbsOptimized": "false",
        "ImageId": {
          "Fn::FindInMap": [
            "MPAmimotov4",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "InstanceInitiatedShutdownBehavior": "stop",
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "Monitoring": "false",
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "Tenancy": "default",
        "SecurityGroupIds": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "IamInstanceProfile": {
          "Ref": "IAMForEC2"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "/opt/aws/bin/cfn-init -s ",
                {
                  "Ref": "AWS::StackName"
                },
                " -r EC2 ",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "HasRDS?",
            "Value": "true"
          }
        ]
      }
    },
    "RDSSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.1.0/24",
        "AvailabilityZone": {
          "Fn::FindInMap": [
            "AZs",
            {
              "Ref": "AWS::Region"
            },
            "PRI"
          ]
        },
        "MapPublicIpOnLaunch": "false",
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "RDSSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.2.0/24",
        "AvailabilityZone": {
          "Fn::FindInMap": [
            "AZs",
            {
              "Ref": "AWS::Region"
            },
            "SEC"
          ]
        },
        "MapPublicIpOnLaunch": "false",
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "DBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "Subnets available for the RDS DB Instance",
        "SubnetIds": [
          {
            "Ref": "RDSSubnet1"
          },
          {
            "Ref": "RDSSubnet2"
          }
        ]
      }
    },
    "RDSSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "This is Simple RDS SecurityGroup made by CloudFormation",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "3306",
            "ToPort": "3306",
            "SourceSecurityGroupId": {
              "Ref": "SecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "3306",
            "ToPort": "3306",
            "SourceSecurityGroupId": {
              "Ref": "SecurityGroup"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "RDS": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "AllocatedStorage": {
          "Ref": "DBAllocatedStorage"
        },
        "AllowMajorVersionUpgrade": "true",
        "AutoMinorVersionUpgrade": "true",
        "AvailabilityZone": {
          "Fn::FindInMap": [
            "AZs",
            {
              "Ref": "AWS::Region"
            },
            "PRI"
          ]
        },
        "BackupRetentionPeriod": "1",
        "DBInstanceClass": {
          "Ref": "RDSInstanceType"
        },
        "DBName": "wordpress",
        "DBSubnetGroupName": {
          "Ref": "DBSubnetGroup"
        },
        "Engine": "MariaDB",
        "MasterUsername": "amimoto",
        "MasterUserPassword": {
          "Ref": "MySQLPassword"
        },
        "MultiAZ": {
          "Ref": "MulitiAZDatabase"
        },
        "Port": "3306",
        "PreferredBackupWindow": "00:00-00:30",
        "PreferredMaintenanceWindow": "sun:16:00-sun:17:30",
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ],
        "VPCSecurityGroups": [
          {
            "Ref": "RDSSecurityGroup"
          }
        ]
      }
    },
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "This is Simple SecurityGroup made by CloudFormation",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "ELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Subnets": [
          {
            "Ref": "PublicSubnet"
          }
        ],
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "30",
          "Target": "TCP:80",
          "Timeout": "10",
          "UnhealthyThreshold": "2"
        },
        "Listeners": [
          {
            "InstancePort": "80",
            "LoadBalancerPort": "80",
            "Protocol": "HTTP",
            "InstanceProtocol": "HTTP"
          }
        ],
        "Instances": [
          {
            "Ref": "EC2"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "SecurityGroup"
          }
        ]
      }
    },
    "IAMPolicyForCloudFront": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Description": "Allow invalidation",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "cloudfront:*Invalidation*"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    },
    "IAMPolicyForS3Media": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Description": "Allow manage object under specific bucket",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListAllMyBuckets"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::*"
                  ]
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:PutObjectAcl",
                "s3:GetObjectAcl",
                "s3:DeleteObject"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3Media"
                    },
                    "/*"
                  ]
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListBucket",
                "s3:GetBucketLocation"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3Media"
                    }
                  ]
                ]
              }
            }
          ]
        }
      }
    },
    "IAMRoleForStack001": {
      "Type": "AWS::IAM::Role",
      "DependsOn": [
        "IAMPolicyForCloudFront",
        "IAMPolicyForS3Media"
      ],
      "Properties": {
        "ManagedPolicyArns": [
          {
            "Ref": "IAMPolicyForCloudFront"
          },
          {
            "Ref": "IAMPolicyForS3Media"
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Effect": "Allow",
            "Principal": {
              "Service": "ec2.amazonaws.com"
            },
            "Action": [
              "sts:AssumeRole"
            ]
          }
        },
        "Path": "/"
      }
    },
    "IAMForEC2": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "IAMRoleForStack001"
          }
        ]
      }
    },
    "CloudFront": {
      "Type": "AWS::CloudFront::Distribution",
      "Properties": {
        "DistributionConfig": {
          "Origins": [
            {
              "DomainName": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "ELB",
                        "DNSName"
                      ]
                    }
                  ]
                ]
              },
              "Id": {
                "Ref": "AWS::StackName"
              },
              "CustomOriginConfig": {
                "HTTPPort": "80",
                "HTTPSPort": "443",
                "OriginProtocolPolicy": "http-only"
              }
            }
          ],
          "PriceClass": "PriceClass_200",
          "Enabled": "true",
          "Comment": "Created by AMIMOTO CloudFormation.",
          "DefaultRootObject": "index.php",
          "DefaultCacheBehavior": {
            "SmoothStreaming": "false",
            "AllowedMethods": [
              "HEAD",
              "DELETE",
              "POST",
              "GET",
              "OPTIONS",
              "PUT",
              "PATCH"
            ],
            "CachedMethods": [
              "HEAD",
              "GET"
            ],
            "MinTTL": "0",
            "TargetOriginId": {
              "Ref": "AWS::StackName"
            },
            "ForwardedValues": {
              "QueryString": "true",
              "Headers": [
                "CloudFront-Forwarded-Proto",
                "CloudFront-Is-Desktop-Viewer",
                "CloudFront-Is-Mobile-Viewer",
                "CloudFront-Is-Tablet-Viewer",
                "Host"
              ],
              "Cookies": {
                "Forward": "whitelist",
                "WhitelistedNames": [
                  "wordpress_????????????????????????????????",
                  "wordpress_logged_in_*"
                ]
              }
            },
            "ViewerProtocolPolicy": "allow-all"
          },
          "ViewerCertificate": {
            "CloudFrontDefaultCertificate": "true",
            "MinimumProtocolVersion": "SSLv3"
          },
          "Restrictions": {
            "GeoRestriction": {
              "RestrictionType": "none"
            }
          },
          "CacheBehaviors": [
            {
              "TargetOriginId": {
                "Ref": "AWS::StackName"
              },
              "ViewerProtocolPolicy": "allow-all",
              "ForwardedValues": {
                "Headers": [
                  "CloudFront-Forwarded-Proto",
                  "CloudFront-Is-Desktop-Viewer",
                  "CloudFront-Is-Mobile-Viewer",
                  "CloudFront-Is-Tablet-Viewer",
                  "Host",
                  "User-Agent"
                ],
                "Cookies": {
                  "Forward": "all"
                },
                "QueryString": "true"
              },
              "PathPattern": "*.php",
              "SmoothStreaming": "false",
              "AllowedMethods": [
                "HEAD",
                "DELETE",
                "POST",
                "GET",
                "OPTIONS",
                "PUT",
                "PATCH"
              ],
              "CachedMethods": [
                "HEAD",
                "GET"
              ],
              "MinTTL": "0"
            },
            {
              "TargetOriginId": {
                "Ref": "AWS::StackName"
              },
              "ViewerProtocolPolicy": "allow-all",
              "ForwardedValues": {
                "Headers": [
                  "Accept",
                  "Authorization",
                  "CloudFront-Forwarded-Proto",
                  "CloudFront-Is-Desktop-Viewer",
                  "CloudFront-Is-Mobile-Viewer",
                  "CloudFront-Is-Tablet-Viewer",
                  "Host",
                  "User-Agent"
                ],
                "Cookies": {
                  "Forward": "all"
                },
                "QueryString": "true"
              },
              "PathPattern": "/wp-admin/",
              "SmoothStreaming": "false",
              "AllowedMethods": [
                "HEAD",
                "DELETE",
                "POST",
                "GET",
                "OPTIONS",
                "PUT",
                "PATCH"
              ],
              "CachedMethods": [
                "HEAD",
                "GET"
              ],
              "MinTTL": "0"
            },
            {
              "TargetOriginId": {
                "Ref": "AWS::StackName"
              },
              "ViewerProtocolPolicy": "allow-all",
              "ForwardedValues": {
                "Headers": [
                  "Host"
                ],
                "Cookies": {
                  "Forward": "none"
                },
                "QueryString": "true"
              },
              "PathPattern": "/wp-admin/uploads/*",
              "SmoothStreaming": "false",
              "AllowedMethods": [
                "HEAD",
                "GET"
              ],
              "CachedMethods": [
                "HEAD",
                "GET"
              ],
              "MinTTL": "43200"
            },
            {
              "TargetOriginId": {
                "Ref": "AWS::StackName"
              },
              "ViewerProtocolPolicy": "allow-all",
              "ForwardedValues": {
                "Headers": [
                  "Host"
                ],
                "Cookies": {
                  "Forward": "none"
                },
                "QueryString": "true"
              },
              "PathPattern": "/wp-includes/*",
              "SmoothStreaming": "false",
              "AllowedMethods": [
                "HEAD",
                "GET"
              ],
              "CachedMethods": [
                "HEAD",
                "GET"
              ],
              "MinTTL": "43200"
            },
            {
              "TargetOriginId": {
                "Ref": "AWS::StackName"
              },
              "ViewerProtocolPolicy": "allow-all",
              "ForwardedValues": {
                "Headers": [
                  "Host"
                ],
                "Cookies": {
                  "Forward": "none"
                },
                "QueryString": "true"
              },
              "PathPattern": "/wp-content/*",
              "SmoothStreaming": "false",
              "AllowedMethods": [
                "HEAD",
                "GET"
              ],
              "CachedMethods": [
                "HEAD",
                "GET"
              ],
              "MinTTL": "43200"
            }
          ]
        }
      }
    },
    "S3Media": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "WebsiteConfiguration": {
          "IndexDocument": "index.html"
        }
      },
      "DeletionPolicy": "Retain"
    }
  },
  "Outputs": {
    "EC2InstanceId": {
      "Description": "Access for the first time, Please input it.",
      "Value": {
        "Ref": "EC2"
      }
    },
    "WebSiteURL": {
      "Description": "WordPress Site URL  (Please wait a few minutes for the upgrade of WordPress to access for the first time.)",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "CloudFront",
                "DomainName"
              ]
            }
          ]
        ]
      }
    },
    "CloudFrontDistributionId": {
      "Description": "This is CloudFront Disctribution ID. Please set 'C3 CloudFlont Cache Clear' plugin on admin page.",
      "Value": {
        "Ref": "CloudFront"
      }
    },
    "S3MediaBucketURL": {
      "Description": "This is S3 Bucket URL. Please set 'Nephila clavata' Plugin on admin page.",
      "Value": {
        "Fn::GetAtt": [
          "S3Media",
          "WebsiteURL"
        ]
      }
    }
  }
}
